import PyPDF2
import os
import re

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path ‡πÅ‡∏ö‡∏ö relative ‡∏à‡∏≤‡∏Å root ‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
PDF_PATH = os.path.join(BASE_DIR, "public", "course", "‡∏°‡∏Ñ‡∏≠2-DME-65.pdf")
OUTPUT_PATH = os.path.join(BASE_DIR, "public", "data", "course_dme.txt")  # ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á

print("=" * 60)
print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô Text File")
print("=" * 60)
print(f"üìÇ ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {BASE_DIR}")
print(f"üìÑ ‡πÑ‡∏ü‡∏•‡πå PDF: {PDF_PATH}")
print(f"üíæ ‡πÑ‡∏ü‡∏•‡πå Output: {OUTPUT_PATH}")
print("=" * 60)

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå PDF ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if not os.path.exists(PDF_PATH):
    print("\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF!")
    print(f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà: {PDF_PATH}")
    print("\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ‡∏¢‡πâ‡∏≤‡∏¢ PDF ‡πÑ‡∏õ‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà public/course/‡∏°‡∏Ñ‡∏≠2-COM-65.pdf")
    input("\n‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á...")
    exit(1)

def clean_text(text):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô"""
    
    # 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏£‡∏∞‡∏≠‡∏≥
    text = re.sub(r' ‡∏≤', '‡∏≥', text)
    text = re.sub(r'([‡∏Å-‡∏Æ]) ‡∏≤', r'\1‡∏≥', text)
    
    # 2. ‡∏•‡∏ö newline ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î
    text = re.sub(r'\n{3,}', '\n\n', text)
    
    # 3. ‡πÅ‡∏õ‡∏•‡∏á newline ‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏•‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á
    lines = text.split('\n')
    cleaned_lines = []
    
    for i, line in enumerate(lines):
        line = line.strip()
        if not line:
            if cleaned_lines and cleaned_lines[-1] != '':
                cleaned_lines.append('')
            continue
        
        is_heading = (
            re.match(r'^\d+\.', line) or
            re.match(r'^[‚Ä¢\-\*]', line) or
            re.match(r'^[‡∏Å-‡∏Æ]\)', line) or
            len(line) < 80 and not line.endswith((':', '?', '!', '.', '‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞'))
        )
        
        if cleaned_lines and not is_heading:
            prev_line = cleaned_lines[-1]
            if prev_line and not prev_line.endswith(('.', ':', '?', '!', '‡∏Ñ‡∏£‡∏±‡∏ö', '‡∏Ñ‡πà‡∏∞')):
                cleaned_lines[-1] = prev_line + ' ' + line
                continue
        
        cleaned_lines.append(line)
    
    text = '\n'.join(cleaned_lines)
    text = re.sub(r' {2,}', ' ', text)
    text = re.sub(r' +([.,;:!?])', r'\1', text)
    text = re.sub(r'([.,;:!?])([^\s\n])', r'\1 \2', text)
    text = re.sub(r'[\x00-\x08\x0b-\x0c\x0e-\x1f\x7f-\x9f]', '', text)
    text = re.sub(r'\n([‡∏Å-‡∏Æ]{2,}[^\n]{0,50})\n', r'\n\n\1\n', text)
    
    return text.strip()

try:
    print("\nüìñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô PDF...")
    
    with open(PDF_PATH, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        num_pages = len(pdf_reader.pages)
        
        print(f"‚úì ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {num_pages} ‡∏´‡∏ô‡πâ‡∏≤")
        
        raw_text = ""
        for i, page in enumerate(pdf_reader.pages, 1):
            text = page.extract_text()
            raw_text += text + "\n"
            progress = (i / num_pages) * 100
            print(f"‚è≥ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {i}/{num_pages} ‡∏´‡∏ô‡πâ‡∏≤ ({progress:.1f}%)", end='\r')
        
        print(f"\n‚úì ‡∏≠‡πà‡∏≤‡∏ô PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {num_pages} ‡∏´‡∏ô‡πâ‡∏≤          ")
        
        print("\nüßπ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°...")
        cleaned_text = clean_text(raw_text)
        print("‚úì ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå public/data ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
        os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)
        
        print("\nüíæ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå text...")
        with open(OUTPUT_PATH, 'w', encoding='utf-8') as text_file:
            text_file.write("=" * 80 + "\n")
            text_file.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏ß‡∏¥‡∏®‡∏ß‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô\n")
            text_file.write(f"‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {num_pages} ‡∏´‡∏ô‡πâ‡∏≤\n")
            text_file.write("‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: 2025-10-16\n")
            text_file.write("=" * 80 + "\n\n")
            text_file.write(cleaned_text)
        
        print("‚úì ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"   - ‡πÑ‡∏ü‡∏•‡πå: {os.path.basename(OUTPUT_PATH)}")
        print(f"   - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: public/data/")  # ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        
        reduction = ((len(raw_text) - len(cleaned_text)) / len(raw_text)) * 100
        file_size = os.path.getsize(OUTPUT_PATH) / 1024
        
        print(f"\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥:")
        print(f"   - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡πâ‡∏≤: {num_pages} ‡∏´‡∏ô‡πâ‡∏≤")
        print(f"   - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö: {len(raw_text):,} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        print(f"   - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î: {len(cleaned_text):,} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£")
        print(f"   - ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î: {reduction:.1f}%")
        print(f"   - ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {file_size:.2f} KB")
        
        print("\n" + "=" * 60)
        print("üìÑ ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (500 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å)")
        print("=" * 60)
        print(cleaned_text[:500])
        print("...")
        
        print("\n" + "=" * 60)
        print("‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö chatbot ‡πÅ‡∏•‡πâ‡∏ß")
        print("=" * 60)
        print("\nüìå ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ:")
        print("   1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà: public/data/course_knowledge.txt")
        print("   2. ‡∏£‡∏±‡∏ô: npm run dev")
        print("   3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö chatbot")
        
except Exception as e:
    print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
    print("\nüí° ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå PDF ‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢")
    print("   - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏•‡πá‡∏≠‡∏Ñ‡πÇ‡∏î‡∏¢‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡∏∑‡πà‡∏ô")
    print("   - ‡∏•‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á PyPDF2 ‡πÉ‡∏´‡∏°‡πà: pip install --upgrade PyPDF2")
    import traceback
    print("\nüîç ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:")
    traceback.print_exc()

print("\n")
input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á...")
